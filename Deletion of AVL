#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct Node{
    int data;
    struct Node* left;
    struct Node* right;
    int height;
}Node;

Node* createNode(int data){
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    newNode->height = 1;
   
    return newNode;
}

int height(Node* root){
    if(root==NULL){
        return 0;
    }
   
    return root->height;
}

Node* rightRotate(Node* y){
    Node* x = y->left;
    Node* t2 = x->right;
   
    x->right = y;
    y->left = t2;
   
    y->height = fmax(height(y->left), height(y->right))+1;
    x->height = fmax(height(x->left), height(x->right))+1;
   
    return x;
}

Node* leftRotate(Node* x){
    Node* y = x->right;
    Node* t2 = y->left;
   
    y->left = x;
    x->right = t2;
   
    x->height = fmax(height(x->left), height(x->right))+1;
    y->height = fmax(height(y->left), height(y->right))+1;
   
    return y;
}

int getBalance(Node* root){
   
    if(root==NULL){
        return 0;
    }
   
    return height(root->left)-height(root->right);
}

Node* insert(Node* root, int data){
    if(root==NULL){
        return createNode(data);
    }
   
    if(data<root->data){
        root->left = insert(root->left, data);
    }else if(data>root->data){
        root->right = insert(root->right, data);
    }else{
        return root;
    }
   
    root->height = fmax(height(root->left), height(root->right))+1;
   
    int balance = getBalance(root);
    
    // RR
    if(balance>1 && data<root->left->data){
        return rightRotate(root);
    }
    
    // LR
    if(balance>1 && data>root->left->data){
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
   
    // LL
    if(balance<-1 && data>root->right->data){
        return leftRotate(root);
    }
   
    // RL
    if(balance<-1 && data<root->right->data){
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}

void inOrder(Node* root){
    if(root==NULL){
        return;
    }
    printf("%d ", root->data);
    inOrder(root->left);
    //printf("%d ", root->data);
    inOrder(root->right);
    //printf("%d ", root->data);
}

int minvalue(Node* root){
	if(root->left==NULL){
		return root->data;
	}
	
	minvalue(root->left);
}


Node* deleteNode(Node* root, int key){
	if(root == NULL){
		return root;
	}
	
	if(key<root->data){
		root->left = deleteNode(root->left, key);
	}else if(key> root->data){
		root->right = deleteNode(root->right, key);
	}else {
		if(root->left==NULL){
			return root->right;
		}else if(root->right==NULL){
			return root->left;
		}
		
		root->data = minvalue(root->right);
		root->right = deleteNode(root->right, root->data);
	}
	
	 root->height = fmax(height(root->left), height(root->right))+1;
   
    int balance = getBalance(root);
   
    // RR
    if(balance>1 && getBalance(root->left)>0){
        return rightRotate(root);
    }
   
    // LR
    if(balance>1 && getBalance(root->left)<0){
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
   
    // LL
    if(balance<-1 && getBalance(root->right)<0){
        return leftRotate(root);
    }
   
    // RL
    if(balance<-1 && getBalance(root->right)>0){
        root->right = rightRotate(root->right);
        return leftRotate(root);
	}
	return root;
}

int main()
{
    Node* root = NULL;
	int data;
	
	scanf("%d", &data);
	
	while(data != -1){
		root = insert(root, data);
		scanf("%d", &data);
	}
   
    inOrder(root);
    printf("\n");
    root = deleteNode(root, 16);
    root = deleteNode(root, 17);
    root = deleteNode(root, 7);
    root = deleteNode(root, 14);
    inOrder(root);

    return 0;
}
