#include<stdio.h>
#include<stdlib.h>

struct Node
{
    int data;
    struct Node* next;
};

struct Node* insertionatEnd(struct Node* head, int data){
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    
    newNode->data = data;
    newNode->next = NULL;
    
    if(head == NULL){
        return newNode;
    }
    
    struct Node* temp = head;
    while(temp->next != NULL){
        temp = temp->next;
    }
    temp->next = newNode;
    return head;
}

void printlist(struct Node* head) {
    if (head == NULL) {
        printf("Linked List is empty");
        return;
    }

    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d->", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

//18 max

int MAX(struct Node* head){
    int max = head->data;
    struct Node* temp = head->next;
    while(temp != NULL){
        if(temp->data > max){
            max = temp->data;
        }
        temp = temp->next;
    }
        return max;
}

//19 main

int MIN(struct Node* head){
    int min = head->data;
    struct Node* temp = head->next;
    while(temp != NULL){
        if(temp->data < min){
            min = temp->data;
        }
        temp = temp->next;
    }
        return min;
}
// 21 length

int LENGTH(struct Node* head){
    int c = 0;
    struct Node* temp = head;
    while(temp != NULL){
        c += 1;
        temp = temp->next;
    }
        return c;
}

//22 sortning
void SORT(struct Node* head){
    int temp;
    struct Node *i, *j;
    for(i = head; i != NULL; i = i->next){
            for(j = i->next; j != NULL; j= j->next){
                if(i->data > j->data){
                    temp = i->data;
                    i->data = j->data;
                    j->data = temp;
                }
            }
        }
    }

int main(){
    struct Node* head = NULL;
    int data;
    printf("Enter the values to insert (-1 to stop):\n");
     while (1) {
        scanf("%d", &data);
        if (data == -1) break;
        head = insertionatEnd(head, data);
    }
    
    printf("\nLinked List is: ");
    printlist(head);
    
    int maximum =  MAX(head);
    printf("\nmaximum element is %d", maximum);
    
    int minimum =  MIN(head);
    printf("\nminimum element is %d", minimum);
    
    
    //20 diff 
    
    int diff = maximum - minimum;
    printf("\nDifference of two numbers is %d", diff);
    
    int length = LENGTH(head);
    printf("\nLength of LL is %d", length);
    
    SORT(head);
    printf("\nsortning of the LL is : ");
    printlist(head);
}
