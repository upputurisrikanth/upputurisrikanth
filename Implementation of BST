#include <stdio.h>
#include <stdlib.h>

// Define the Node structure
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to print the tree
void printTree(Node* root) {
    if (root == NULL) {
        return;
    }

    printf("%d:", root->data);
    if (root->left != NULL) {
        printf("L:%d,", root->left->data);
    }
    if (root->right != NULL) {
        printf("R:%d", root->right->data);
    }
    printf("\n");

    printTree(root->left);
    printTree(root->right);
}

// Function to search for an element in the tree
int search(Node* root, int elt) {
    if (root == NULL) {
        return 0;
    }

    if (root->data == elt) {
        return 1; // Element found
    }else if(root->data > elt){
        return search(root->left, elt);
    }else{
        return search(root->right, elt);
    }
}

// Function to insert a node into the tree
Node* insert(Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }

    if (data <= root->data) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }

    return root;
}

// Function to find the minimum value in a tree
int minValue(Node* root) {
    int minv = root->data;
    while (root->left != NULL) {
        minv = root->left->data;
        root = root->left;
    }
    return minv;
}

// Function to delete a node from the tree
Node* deleteNode(Node* root, int key) {
    if (root == NULL) {
        return root;
    }

    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        if (root->left == NULL) {
           
            return root->right;
        } else if (root->right == NULL) {
           
            return root->left;
        }

        root->data = minValue(root->right);
        root->right = deleteNode(root->right, root->data);
    }

    return root;
}

// Main function
int main() {
    int t, choice, data;
    Node* root = NULL;

    scanf("%d", &t);

    for (int i = 0; i < t; i++) {
        scanf("%d", &choice);

        if (choice == 1) {
            scanf("%d", &data);
            root = insert(root, data);
        } else if (choice == 2) {
            scanf("%d", &data);
            root = deleteNode(root, data);
        } else if (choice == 3) {
            scanf("%d", &data);
            printf("%s\n", search(root, data) ? "true" : "false");
        } else if (choice == 4) {
            printTree(root);
        }
    }

    return 0;
}
