#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* insertatEnd(struct Node* head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    if (head == NULL) {
        return newNode;
    }
    struct Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
    return head;
}

struct Node* insertatBeginning(struct Node* head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = head;
    return newNode;
}

struct Node* insertAfter(struct Node* head, int pos, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    struct Node* temp = head;
    for (int i = 1; i < pos && temp != NULL; i++) {
        temp = temp->next;
    }
    if (temp != NULL) {
        newNode->next = temp->next;
        temp->next = newNode;
    } else {
        printf("\nSorry! No such position is found:");
        free(newNode);
    }
    return head;
}

struct Node* insertparticular(struct Node* head, int pos, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    struct Node* temp = head;
    for (int i = 1; i < pos - 1 && temp != NULL; i++) {
        temp = temp->next;
    }
    if (temp != NULL) {
        newNode->next = temp->next;
        temp->next = newNode;
    } else {
        printf("\nSorry! No such position is found:");
        free(newNode);
    }
    return head;
}

struct Node* DeletionAtBeginning(struct Node* head) {
    if (head == NULL) {
        printf("\nLL is already empty");
        return NULL;
    }
    struct Node* temp = head;
    head = head->next;
    free(temp);
    return head;
}

struct Node* DeletionAtEnd(struct Node* head) {
    if (head == NULL) {
        printf("\nLL is already empty");
        return NULL;
    }
    if (head->next == NULL) {
        free(head);
        return NULL;
    }
    struct Node* temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
    return head;
}

void printlist(struct Node* head) {
    if (head == NULL) {
        printf("\nLL is empty!");
        return;
    }
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d->", temp->data);
        temp = temp->next;
    }
    printf("NULL");
}

int main() {
    struct Node* head = NULL;
    int choice, data, pos;

    while (1) {
        printf("\nChoose an operation:\n");
        printf("1. Insertion At End (Multiple Values)\n");
        printf("2. Insertion At Beginning (Multiple Values)\n");
        printf("3. Insertion At Particular Position\n");
        printf("4. Insertion After a Position\n");
        printf("5. Deletion At Beginning\n");
        printf("6. Deletion At End\n");
        printf("7. Exit\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter values to insert at end (terminate with -1): ");
                while (1) {
                    scanf("%d", &data);
                    if (data == -1) break;
                    head = insertatEnd(head, data);
                }
                printlist(head);
                break;
            case 2:
                printf("Enter values to insert at beginning (terminate with -1): ");
                while (1) {
                    scanf("%d", &data);
                    if (data == -1) break;
                    head = insertatBeginning(head, data);
                }
                printlist(head);
                break;
            case 3:
                printf("Enter the position and data to insert: ");
                scanf("%d %d", &pos, &data);
                head = insertparticular(head, pos, data);
                printlist(head);
                break;
            case 4:
                printf("Enter the position after which to insert and data to insert: ");
                scanf("%d %d", &pos, &data);
                head = insertAfter(head, pos, data);
                printlist(head);
                break;
            case 5:
                head = DeletionAtBeginning(head);
                printlist(head);
                break;
            case 6:
                head = DeletionAtEnd(head);
                printlist(head);
                break;
            case 7:
                exit(0);
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}
