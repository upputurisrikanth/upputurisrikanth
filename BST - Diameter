#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define MAX_SIZE 100
// Node structure
typedef struct Node{
    int data;
    struct Node* left;
    struct Node* right;
}Node;

Node* createNode(int val){
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = val;
    newNode->left = NULL;
    newNode->right = NULL;
   
    return newNode;
}

Node* insert(Node* root, int val){
    if(root==NULL){
        return createNode(val);
    }
   
    if(val<root->data){
        root->left = insert(root->left, val);
    }else{
        root->right = insert(root->right, val);
    }
   
    return root;
}

int height(Node* root){
    if(root==NULL){
        return 0;
    }
   
    return 1+fmax(height(root->left), height(root->right));
}

int diameter(Node* root){
    if(root==NULL){
        return 0;
    }
   
    int leftH = height(root->left);
    int rightH = height(root->right);
   
    int leftDiameter = diameter(root->left);
    int rightDiameter = diameter(root->right);
   
   
    return fmax(leftH+rightH, fmax(leftDiameter, rightDiameter));
   
}




int main()
{
	int data;
	scanf("%d", &data);
	Node* root = NULL;
	
	while(data != -1){
		root = insert(root, data);
		scanf("%d", &data);
	}
   
    printf("Diameter of the given binary tree is %d", diameter(root)+1);

    return 0;
}
