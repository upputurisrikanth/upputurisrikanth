#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 10000

typedef struct Queue {
    int data[MAX_SIZE];
    int front;
    int rear;
} Queue;

// Function to initialize the queue
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is empty
bool isEmpty(Queue* q) {
    return q->front == -1;
}

// Function to check if the queue is full
bool isFull(Queue* q) {
    return q->rear == MAX_SIZE - 1;
}

// Function to enqueue an element
void enqueue(Queue* q, int val) {
    if (isFull(q)) {
        return;
    }
    q->data[++(q->rear)] = val;
    if (q->front == -1) {
        q->front = 0;
    }
}

// Function to dequeue an element
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        return -1;
    }
    int val = q->data[(q->front)++];
    if (q->front > q->rear) {  // Reset queue when empty
        q->front = -1;
        q->rear = -1;
    }
    return val;
}

typedef struct {
    int stackArray[MAX_SIZE];
    int top;
} Stack;

// Function to initialize the stack
void initializeStack(Stack* stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
bool isStackEmpty(Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
bool isStackFull(Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an integer onto the stack
void push(Stack* stack, int value) {
    if (isStackFull(stack)) {
        return;
    }
    stack->stackArray[++stack->top] = value;
}

// Function to pop an integer from the stack
int pop(Stack* stack) {
    if (isStackEmpty(stack)) {
        return -1;
    }
    return stack->stackArray[stack->top--];
}

int main() {
    Queue q;
    initQueue(&q);
   
    int val;
    scanf("%d", &val);
    if (val == -1) {  // Check for invalid input or empty queue
        printf("Queue is empty\n");
        return 0;
    }
   
    while (val != -1) {
        enqueue(&q, val);
        scanf("%d", &val);
    }

    Stack stack;
    initializeStack(&stack);

    printf("Before reversing:\n");
    while (!isEmpty(&q)) {
        int val = dequeue(&q);
        push(&stack, val);
        printf("%d ", val);
    }
    printf("\n");

    printf("After reversing:\n");
    while (!isStackEmpty(&stack)) {
        printf("%d ", pop(&stack));
    }
    printf("\n");

    return 0;
}
